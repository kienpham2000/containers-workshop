[
{
	"uri": "/",
	"title": "Serverless Workshop",
	"tags": [],
	"description": "",
	"content": "Welcome to Containers / Serverless Workshop We\u0026rsquo;ll learn about AWS Containers and Serverless offering.\nClick on labs on the left to get started.\n"
},
{
	"uri": "/cloud9/",
	"title": "Setup Cloud9 IDE",
	"tags": [],
	"description": "",
	"content": " Setup Cloud9 IDE We\u0026rsquo;ll use Cloud9 as our IDE.\n Login to your AWS Account, make sure you are in the North Virginia (us-east-1) region. At your AWS Console, Click on Services. Go to Cloud9 service, Create environment. Type in workshop for Name and Next step.  Leave everything default and click Next step. Note: make sure to select a Pulic Subnet.  At the Step 3 Review screen, click Create environment. Please give it about 5-10 minutes for the EC2 instance to launch.  "
},
{
	"uri": "/containers/",
	"title": "Containers Lab",
	"tags": [],
	"description": "",
	"content": " Containers Lab Overview In this lab, we\u0026rsquo;ll create a simple Docker container, build and run it locally. Then we\u0026rsquo;ll push it to ECR and run it using ECS Fargate.\n"
},
{
	"uri": "/serverless/clone-lambda-repo/",
	"title": "Clone Lambda repo",
	"tags": [],
	"description": "",
	"content": "  Login to your AWS Account, make sure you are in the North Virginia (us-east-1) region.\n Click on Services Drop down, type Cloud9.\n Select the workshop IDE. Click on Open IDE.  Once launched, Click on + icon and select New Terminal.   Clone repo and cd into it cd ~/environment \u0026amp;\u0026amp; git clone https://github.com/kienpham2000/lambda-example.git \u0026amp;\u0026amp; cd lambda-example  "
},
{
	"uri": "/containers/clone-container-repo/",
	"title": "Clone container repo",
	"tags": [],
	"description": "",
	"content": "  Login to your AWS Account, make sure you are in the North Virginia (us-east-1) region.\n Click on Services Drop down, type Cloud9.\n Select the workshop IDE. Click on Open IDE.  Once launched, Click on + icon and select New Terminal.   Clone repo and cd into it cd ~/environment \u0026amp;\u0026amp; git clone https://github.com/kienpham2000/docker-example.git \u0026amp;\u0026amp; cd docker-example  Output will look like this\nadmin:~/environment $ git clone https://github.com/kienpham2000/docker-example.git Cloning into 'docker-example'... remote: Enumerating objects: 9, done. remote: Counting objects: 100% (9/9), done. remote: Compressing objects: 100% (7/7), done. remote: Total 9 (delta 1), reused 4 (delta 0), pack-reused 0 Unpacking objects: 100% (9/9), done.  "
},
{
	"uri": "/containers/docker-build-run/",
	"title": "Docker build &amp; run",
	"tags": [],
	"description": "",
	"content": " Build the Docker image docker build -t web .  Output\nadmin:~/environment/docker-example (master) $ docker build -t web . Sending build context to Docker daemon 65.54kB Step 1/2 : FROM nginx:alpine ---\u0026gt; b6753551581f Step 2/2 : COPY index.html /usr/share/nginx/html ---\u0026gt; Using cache ---\u0026gt; d44b90c272d6 Successfully built d44b90c272d6 Successfully tagged web:latest  Run the container docker run -p 8080:80 web  Verify the container is running Create a new Terminal tab\ndocker ps  Output\nadmin:~/environment $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES eadc9b959908 web \u0026quot;nginx -g 'daemon ofâ€¦\u0026quot; 33 seconds ago Up 32 seconds 0.0.0.0:80-\u0026gt;80/tcp web  View the UI locally You should be able to see the local webpage started by the container by clicking on Preview. "
},
{
	"uri": "/serverless/sam/",
	"title": "Package &amp; Deploy Lambda using SAM",
	"tags": [],
	"description": "",
	"content": " Create the S3 repo to store SAM artifact Since the S3 repo name must be unique globally, please postfix with your username. We\u0026rsquo;ll use this S3 bucket to store our built artifact.\naws s3api create-bucket --bucket serverless-lab-[change-to-your-username]  Upgrade SAM CLI to latest version This can take up to 2-3 minutes to install all required packages.\n./install-packages.sh  Package the template Don\u0026rsquo;t forget to replace serverless-lab-[your-username] with your actual S3 bucket name created earlier.\nsam package --s3-bucket serverless-lab-[your-username] --s3-prefix lab -t s3-watcher/template.yaml --output-template-file built.yaml  Deploy Lambda using SAM This will take 1-2 minutes as SAM is creating CloudFormation stack. You will also see that there\u0026rsquo;s a new S3 bucket created by SAM: serverless-lab-lambda-s3-watcher-mys3bucket-[random-chars].\nsam deploy --template-file built.yaml --stack-name serverless-lab-lambda-s3-watcher --capabilities CAPABILITY_IAM  Add files to S3 Now when you add any file to the above S3 bucket, you will see that Lambda will get triggered.\n Go to S3 service. Select your bucket, should starts with: serverless-lab-lambda-s3-watcher-mys3bucket-[random-chars]. Select Upload and upload any random file.  Go to Lambda. Click on the Lambda function: serverless-lab-lambda-s3-SimpleS3ListenerFunction-[random-chars] Click on Monitoring. Click on View logs in CloudWatch.  At CloudWatch Logs, click on the latest Log Streams. You will see output looks like this:   Congrats! You are done with this lab.\n"
},
{
	"uri": "/serverless/",
	"title": "Serverless Lab",
	"tags": [],
	"description": "",
	"content": " Serverless Lab Overview In this lab, we\u0026rsquo;ll create simple Lambda function that watch for new files being uploaded to S3. We\u0026rsquo;ll deploy this Lambda using SAM.\n"
},
{
	"uri": "/containers/view-page/",
	"title": "View the container content",
	"tags": [],
	"description": "",
	"content": " Allow your laptop to access EC2 port 80  Go to EC2 / Instances Click on the one running instance Click on Security groups and Inbound / Edit. Allow port 80 to My IP and Save.  Go back to Cloud 9, get the EC2 Public IP curl 169.254.169.254/latest/meta-data/public-ipv4; echo  Open the IP in a new browser tab You should see a simple page being served by the container.\nStop the container Try stopping the container and refresh the last page, it should not work anymore.\ndocker stop $(docker ps -a -q)  "
},
{
	"uri": "/containers/ecr/",
	"title": "Create ECR Repo",
	"tags": [],
	"description": "",
	"content": " Go to ECR service, Get Started. Type in web and click on Create repository.  Click on web / View push commands. Go ahead and copy and paste each command. You will run these commands at Cloud9 Terminal. Note: the first command make sure to include $() Output  Now if you close the push command and refresh the registry, you will see latest image tag pushed to the repo.   "
},
{
	"uri": "/containers/ecs/",
	"title": "Create ECS Cluster",
	"tags": [],
	"description": "",
	"content": " Go to ECS service Click on Get started button  Click on Configure button at the custom section. For the Image, open new browser tab and go to ECR and it\u0026rsquo;s under URI, then append :latest at the end of the URI.  At Step 2, leave everything default and click Next  At Step 3, leave everything default and click Next  At Step 4, review to make sure everything looks good, click Create  After about 3 minutes, all 9 steps will be completed. Click on View Service button   "
},
{
	"uri": "/containers/view-ecs/",
	"title": "View Fargate Container",
	"tags": [],
	"description": "",
	"content": "  Click on Tasks tab from ECS default cluster, you\u0026rsquo;ll see one container running on Fargate. If you go back to EC2 and check, there\u0026rsquo;s no new EC2 instance launched!  Click into the link under Task column Under Network, you\u0026rsquo;ll see the Public IP. Open this IP in a new browser tab, you will see the content of your container running on Fargate serverlessly!   Congrats! You are done with this lab.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/authors/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Thanks to our wonderful contributors  for making Open Source a better place! "
},
{
	"uri": "/example_cf_templates/",
	"title": "Example of using CloudFormation Templates",
	"tags": [],
	"description": "",
	"content": " Click below to add a CloudFormation Stack    Use these templates:       Template 1 example  Launch    Download     Template 2 example  Launch    Download     Template 3 example  Launch    Download      "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]